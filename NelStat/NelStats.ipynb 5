{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MTD</th>\n",
       "      <th>YTD</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>strategy_classification</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Commodity</th>\n",
       "      <td>0.002946</td>\n",
       "      <td>0.010080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CTA</th>\n",
       "      <td>0.002445</td>\n",
       "      <td>-0.018021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Equity Market Neutral</th>\n",
       "      <td>0.001545</td>\n",
       "      <td>-0.008119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fixed Income</th>\n",
       "      <td>0.008062</td>\n",
       "      <td>0.023878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Quant Macro</th>\n",
       "      <td>0.003969</td>\n",
       "      <td>-0.010359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volatility</th>\n",
       "      <td>-0.001244</td>\n",
       "      <td>-0.008836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              MTD       YTD\n",
       "strategy_classification                    \n",
       "Commodity                0.002946  0.010080\n",
       "CTA                      0.002445 -0.018021\n",
       "Equity Market Neutral    0.001545 -0.008119\n",
       "Fixed Income             0.008062  0.023878\n",
       "Quant Macro              0.003969 -0.010359\n",
       "Volatility              -0.001244 -0.008836"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "#Import Data\n",
    "data = pd.read_csv('SampleData.csv')\n",
    "\n",
    "# Create Pivot\n",
    "AST = pd.pivot_table(data, \n",
    "                    values=['MTD', '3M', '6M', 'YTD'], \n",
    "                    index=['strategy_classification'], \n",
    "                    aggfunc=np.mean\n",
    "                    )\n",
    "\n",
    "#Sort Alphabetically by strategy_classification\n",
    "AST['labels'] = AST.index.str.lower()\n",
    "AST = AST.sort_values('labels').drop('labels', axis=1)\n",
    "\n",
    "# If you wanted to add in a new column with a numeric index then you would not drop the column above, and include this:\n",
    "#AST.index = [i for i in range(len(AST.index))]\n",
    "\n",
    "#Re-order Columns\n",
    "AST = AST[['MTD', '3M', '6M', 'YTD']]\n",
    "\n",
    "# Change formatting of numbers into Percentage (Just by changing display)\n",
    "AST.style.format({\n",
    "    'MTD': '{:,.2%}'.format,\n",
    "    '3M': '{:,.2%}'.format,\n",
    "    '6M': '{:,.2%}'.format,\n",
    "    'YTD': '{:,.2%}'.format\n",
    "})\n",
    "\n",
    "AST2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MTD</th>\n",
       "      <th>3M</th>\n",
       "      <th>6M</th>\n",
       "      <th>YTD</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>strategy_classification</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Commodity</th>\n",
       "      <td>0.29%</td>\n",
       "      <td>0.76%</td>\n",
       "      <td>-2.17%</td>\n",
       "      <td>1.01%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CTA</th>\n",
       "      <td>0.24%</td>\n",
       "      <td>-0.52%</td>\n",
       "      <td>0.01%</td>\n",
       "      <td>-1.80%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Equity Market Neutral</th>\n",
       "      <td>0.15%</td>\n",
       "      <td>-0.45%</td>\n",
       "      <td>0.08%</td>\n",
       "      <td>-0.81%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fixed Income</th>\n",
       "      <td>0.81%</td>\n",
       "      <td>-0.02%</td>\n",
       "      <td>-0.07%</td>\n",
       "      <td>2.39%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Quant Macro</th>\n",
       "      <td>0.40%</td>\n",
       "      <td>-0.40%</td>\n",
       "      <td>0.33%</td>\n",
       "      <td>-1.04%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volatility</th>\n",
       "      <td>-0.12%</td>\n",
       "      <td>0.51%</td>\n",
       "      <td>-2.81%</td>\n",
       "      <td>-0.88%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            MTD      3M      6M     YTD\n",
       "strategy_classification                                \n",
       "Commodity                 0.29%   0.76%  -2.17%   1.01%\n",
       "CTA                       0.24%  -0.52%   0.01%  -1.80%\n",
       "Equity Market Neutral     0.15%  -0.45%   0.08%  -0.81%\n",
       "Fixed Income              0.81%  -0.02%  -0.07%   2.39%\n",
       "Quant Macro               0.40%  -0.40%   0.33%  -1.04%\n",
       "Volatility               -0.12%   0.51%  -2.81%  -0.88%"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Create Data for All Strats Table\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "#Import Data\n",
    "data = pd.read_csv('SampleData.csv')\n",
    "\n",
    "# Create Pivot\n",
    "AST = pd.pivot_table(data, \n",
    "                    values=['MTD', '3M', '6M', 'YTD'], \n",
    "                    index=['strategy_classification'], \n",
    "                    aggfunc=np.mean\n",
    "                    )\n",
    "\n",
    "#Sort Alphabetically by strategy_classification\n",
    "AST['labels'] = AST.index.str.lower()\n",
    "AST = AST.sort_values('labels').drop('labels', axis=1)\n",
    "\n",
    "# If you wanted to add in a new column with a numeric index then you would not drop the column above, and include this:\n",
    "#AST.index = [i for i in range(len(AST.index))]\n",
    "\n",
    "#Re-order Columns\n",
    "AST = AST[['MTD', '3M', '6M', 'YTD']]\n",
    "\n",
    "#Convert numbers into percentage (by actually converting the data type)\n",
    "AST['MTD'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['MTD']], index = AST.index)\n",
    "AST['3M'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['3M']], index = AST.index)\n",
    "AST['6M'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['6M']], index = AST.index)\n",
    "AST['YTD'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['YTD']], index = AST.index)\n",
    "\n",
    "AST\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Labels</th>\n",
       "      <th>Mean</th>\n",
       "      <th>Max</th>\n",
       "      <th>Min</th>\n",
       "      <th>Median</th>\n",
       "      <th>Lower Quartile</th>\n",
       "      <th>Upper Quartile</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>commodity</td>\n",
       "      <td>0.29%</td>\n",
       "      <td>4.94%</td>\n",
       "      <td>-4.88%</td>\n",
       "      <td>0.78%</td>\n",
       "      <td>-2.07%</td>\n",
       "      <td>2.77%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cta</td>\n",
       "      <td>0.24%</td>\n",
       "      <td>4.68%</td>\n",
       "      <td>-4.89%</td>\n",
       "      <td>0.29%</td>\n",
       "      <td>-1.97%</td>\n",
       "      <td>3.11%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>equity market neutral</td>\n",
       "      <td>0.15%</td>\n",
       "      <td>4.99%</td>\n",
       "      <td>-4.89%</td>\n",
       "      <td>0.08%</td>\n",
       "      <td>-2.56%</td>\n",
       "      <td>3.20%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>fixed income</td>\n",
       "      <td>0.81%</td>\n",
       "      <td>4.94%</td>\n",
       "      <td>-4.73%</td>\n",
       "      <td>1.51%</td>\n",
       "      <td>-1.90%</td>\n",
       "      <td>3.60%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>quant macro</td>\n",
       "      <td>0.40%</td>\n",
       "      <td>4.84%</td>\n",
       "      <td>-4.94%</td>\n",
       "      <td>0.77%</td>\n",
       "      <td>-2.36%</td>\n",
       "      <td>2.81%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>volatility</td>\n",
       "      <td>-0.12%</td>\n",
       "      <td>4.82%</td>\n",
       "      <td>-4.89%</td>\n",
       "      <td>0.41%</td>\n",
       "      <td>-3.30%</td>\n",
       "      <td>2.17%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Labels    Mean    Max     Min Median Lower Quartile  \\\n",
       "0              commodity   0.29%  4.94%  -4.88%  0.78%         -2.07%   \n",
       "1                    cta   0.24%  4.68%  -4.89%  0.29%         -1.97%   \n",
       "2  equity market neutral   0.15%  4.99%  -4.89%  0.08%         -2.56%   \n",
       "3           fixed income   0.81%  4.94%  -4.73%  1.51%         -1.90%   \n",
       "4            quant macro   0.40%  4.84%  -4.94%  0.77%         -2.36%   \n",
       "5             volatility  -0.12%  4.82%  -4.89%  0.41%         -3.30%   \n",
       "\n",
       "  Upper Quartile  \n",
       "0          2.77%  \n",
       "1          3.11%  \n",
       "2          3.20%  \n",
       "3          3.60%  \n",
       "4          2.81%  \n",
       "5          2.17%  "
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Calculate Data for Candlestick Chart\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "#Import Data\n",
    "data = pd.read_csv('SampleData.csv')\n",
    "\n",
    "def fiftiethPercentile(x):\n",
    "    return np.percentile(x, 50)\n",
    "\n",
    "def lowerQuartile(x):\n",
    "    return np.percentile(x, 25)\n",
    "\n",
    "def upperQuartile(x):\n",
    "    return np.percentile(x, 75)\n",
    "\n",
    "# Create Pivot\n",
    "AST = pd.pivot_table(data, \n",
    "                    values=['MTD'], \n",
    "                    index=['strategy_classification'], \n",
    "                    aggfunc=[np.mean, np.max, np.min, fiftiethPercentile, lowerQuartile, upperQuartile]\n",
    "                    )\n",
    "\n",
    "#Sort Alphabetically by strategy_classification\n",
    "AST['Labels'] = AST.index.str.lower()\n",
    "AST = AST.sort_values('Labels')\n",
    "#.drop('labels', axis=1)\n",
    "\n",
    "AST.index = [i for i in range(len(AST.index))]\n",
    "\n",
    "# Rename columns\n",
    "AST.columns = ['Mean', 'Max', 'Min', 'Median', 'Lower Quartile', 'Upper Quartile', 'Labels']\n",
    "AST = AST[['Labels', 'Mean', 'Max', 'Min', 'Median', 'Lower Quartile', 'Upper Quartile']]\n",
    "\n",
    "#Convert numbers into percentage (by actually converting the data type)\n",
    "AST['Mean'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Mean']], index = AST.index)\n",
    "AST['Max'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Max']], index = AST.index)\n",
    "AST['Min'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Min']], index = AST.index)\n",
    "AST['Median'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Median']], index = AST.index)\n",
    "AST['Lower Quartile'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Lower Quartile']], index = AST.index)\n",
    "AST['Upper Quartile'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Upper Quartile']], index = AST.index)\n",
    "\n",
    "AST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Guest/miniconda3/lib/python3.6/site-packages/numpy/core/fromnumeric.py:52: FutureWarning: reshape is deprecated and will raise in a subsequent release. Please use .values.reshape(...) instead\n",
      "  return getattr(obj, method)(*args, **kwds)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'boxes': [<matplotlib.lines.Line2D at 0x116687550>,\n",
       "  <matplotlib.lines.Line2D at 0x11696d438>,\n",
       "  <matplotlib.lines.Line2D at 0x1165babe0>,\n",
       "  <matplotlib.lines.Line2D at 0x1130c8320>,\n",
       "  <matplotlib.lines.Line2D at 0x1169625c0>,\n",
       "  <matplotlib.lines.Line2D at 0x116671b70>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x11694fd30>,\n",
       "  <matplotlib.lines.Line2D at 0x1127b0ac8>,\n",
       "  <matplotlib.lines.Line2D at 0x11696dfd0>,\n",
       "  <matplotlib.lines.Line2D at 0x1124f2e80>,\n",
       "  <matplotlib.lines.Line2D at 0x116970080>,\n",
       "  <matplotlib.lines.Line2D at 0x10c92dfd0>,\n",
       "  <matplotlib.lines.Line2D at 0x1130ae2e8>,\n",
       "  <matplotlib.lines.Line2D at 0x1130ae128>,\n",
       "  <matplotlib.lines.Line2D at 0x11667e1d0>,\n",
       "  <matplotlib.lines.Line2D at 0x11667ecf8>,\n",
       "  <matplotlib.lines.Line2D at 0x116c1db38>,\n",
       "  <matplotlib.lines.Line2D at 0x116c2f358>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x1169a8710>,\n",
       "  <matplotlib.lines.Line2D at 0x1165ba550>,\n",
       "  <matplotlib.lines.Line2D at 0x1124c0320>,\n",
       "  <matplotlib.lines.Line2D at 0x10b224eb8>,\n",
       "  <matplotlib.lines.Line2D at 0x1166710b8>,\n",
       "  <matplotlib.lines.Line2D at 0x116c2fba8>],\n",
       " 'means': [],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x1127b0860>,\n",
       "  <matplotlib.lines.Line2D at 0x1165ba198>,\n",
       "  <matplotlib.lines.Line2D at 0x10c92d668>,\n",
       "  <matplotlib.lines.Line2D at 0x1124380b8>,\n",
       "  <matplotlib.lines.Line2D at 0x1166712b0>,\n",
       "  <matplotlib.lines.Line2D at 0x116c2f780>],\n",
       " 'whiskers': [<matplotlib.lines.Line2D at 0x1125054e0>,\n",
       "  <matplotlib.lines.Line2D at 0x11694f128>,\n",
       "  <matplotlib.lines.Line2D at 0x11696d0b8>,\n",
       "  <matplotlib.lines.Line2D at 0x11696dd68>,\n",
       "  <matplotlib.lines.Line2D at 0x116970a58>,\n",
       "  <matplotlib.lines.Line2D at 0x116970c50>,\n",
       "  <matplotlib.lines.Line2D at 0x11661d320>,\n",
       "  <matplotlib.lines.Line2D at 0x112541630>,\n",
       "  <matplotlib.lines.Line2D at 0x11249f908>,\n",
       "  <matplotlib.lines.Line2D at 0x116abd0f0>,\n",
       "  <matplotlib.lines.Line2D at 0x1166715c0>,\n",
       "  <matplotlib.lines.Line2D at 0x116c1df98>]}"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x116ada5f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Create Candlestick Chart\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "from mpl_finance import candlestick_ohlc\n",
    "from matplotlib.patches import Polygon\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "#Import Data\n",
    "data = pd.read_csv('SampleData.csv')\n",
    "\n",
    "def fiftiethPercentile(x):\n",
    "    return np.percentile(x, 50)\n",
    "\n",
    "def lowerQuartile(x):\n",
    "    return np.percentile(x, 25)\n",
    "\n",
    "def upperQuartile(x):\n",
    "    return np.percentile(x, 75)\n",
    "\n",
    "# Create Pivot\n",
    "AST = pd.pivot_table(data, \n",
    "                    values=['MTD'], \n",
    "                    index=['strategy_classification'], \n",
    "                    aggfunc=[np.mean, np.max, np.min, fiftiethPercentile, lowerQuartile, upperQuartile]\n",
    "                    )\n",
    "\n",
    "#Sort Alphabetically by strategy_classification\n",
    "AST['Labels'] = AST.index.str.lower()\n",
    "AST = AST.sort_values('Labels')\n",
    "#.drop('labels', axis=1)\n",
    "\n",
    "AST.index = [i for i in range(len(AST.index))]\n",
    "\n",
    "# Rename columns\n",
    "AST.columns = ['Mean', 'Max', 'Min', 'Median', 'Lower Quartile', 'Upper Quartile', 'Labels']\n",
    "AST = AST[['Labels', 'Mean', 'Max', 'Min', 'Median', 'Lower Quartile', 'Upper Quartile']]\n",
    "\n",
    "#Convert numbers into percentage (by actually converting the data type)\n",
    "AST['Mean'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Mean']], index = AST.index)\n",
    "AST['Max'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Max']], index = AST.index)\n",
    "AST['Min'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Min']], index = AST.index)\n",
    "AST['Median'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Median']], index = AST.index)\n",
    "AST['Lower Quartile'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Lower Quartile']], index = AST.index)\n",
    "AST['Upper Quartile'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in AST['Upper Quartile']], index = AST.index)\n",
    "AST\n",
    "ohlc= AST[['Labels', 'Lower Quartile', 'Max', 'Min','Upper Quartile']]\n",
    "\n",
    "ohlc.columns = ['Labels', 'open', 'high', 'low', 'close']\n",
    "#ohlc\n",
    "\n",
    "# fig, axs = plt.subplots()\n",
    "\n",
    "#data = data.set_index(['strategy_classification'])\n",
    "\n",
    "data2 = data[ data['strategy_classification'] == 'Commodity' ]['MTD']\n",
    "data3 = data[ data['strategy_classification'] == 'CTA' ]['MTD']\n",
    "data4 = data[ data['strategy_classification'] == 'Equity Market Neutral' ]['MTD']\n",
    "data5 = data[ data['strategy_classification'] == 'Fixed Income' ]['MTD']\n",
    "data6 = data[ data['strategy_classification'] == 'Quant Macro' ]['MTD']\n",
    "data7 = data[ data['strategy_classification'] == 'Volatility' ]['MTD']\n",
    "\n",
    "\n",
    "datachart = [data2, data3, data4, data5, data6, data7]\n",
    "\n",
    "# Multiple box plots on one Axes\n",
    "fig, ax = plt.subplots()\n",
    "ax.boxplot(datachart)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
